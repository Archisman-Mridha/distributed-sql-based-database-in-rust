use std::fmt::Display;

#[derive(Clone, PartialEq, Eq)]
pub enum Token {
  Number(String),
  String(String),

  Identifier(String), // Represents name of a database object (like table, column, index etc.)
  Period,

  Keyword(Keyword),

  Equal,
  GreaterThan,
  GreaterThanOrEqual,
  LessThan,
  LessThanOrEqual,
  LessOrGreaterThan,
  NotEqual,

  Plus,
  Minus,
  Asterisk,
  Slash,
  Caret,
  Percent,

  Exclamation,
  Comma,
  Semicolon,
  Question,

  OpenParenthesis,
  CloseParenthesis
}

impl Display for Token {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    f.write_str(match self {
      Token::Number(n) => n,
      Token::String(s) => s,

      Token::Identifier(s) => s,
      Token::Period => ".",

      Token::Keyword(k) => k.to_str( ),

      Token::Equal => "=",
      Token::GreaterThan => ">",
      Token::GreaterThanOrEqual => ">=",
      Token::LessThan => "<",
      Token::LessThanOrEqual => "<=",
      Token::LessOrGreaterThan => "<>",
      Token::NotEqual => "!=",

      Token::Plus => "+",
      Token::Minus => "-",
      Token::Asterisk => "*",
      Token::Slash => "/",
      Token::Caret => "^",
      Token::Percent => "%",

      Token::Exclamation => "!",
      Token::Comma => ",",
      Token::Semicolon => ";",
      Token::Question => "?",

      Token::OpenParenthesis => "(",
      Token::CloseParenthesis => ")",
    })
  }
}

impl From<Keyword> for Token {
  fn from(keyword: Keyword) -> Self {
    Token::Identifier(keyword.to_str( ).to_string( ))
  }
}

#[derive(Clone, PartialEq, Eq)]
pub enum Keyword {
  AND,
  AS,
  ASC,
  BEGIN,
  BOOL,
  BOOLEAN,
  BY,
  CHAR,
  COMMIT,
  CREATE,
  CROSS,
  DEFAULT,
  DELETE,
  DESC,
  DOUBLE,
  DROP,
  EXPLAIN,
  FALSE,
  FLOAT,
  FROM,
  GROUP,
  HAVING,
  INDEX,
  INFINITY,
  INNER,
  INSERT,
  INT,
  INTEGER,
  INTO,
  IS,
  JOIN,
  KEY,
  LEFT,
  LIKE,
  LIMIT,
  NAN,
  NOT,
  NULL,
  OF,
  OFFSET,
  ON,
  ONLY,
  OR,
  ORDER,
  OUTER,
  PRIMARY,
  READ,
  REFERENCES,
  RIGHT,
  ROLLBACK,
  SELECT,
  SET,
  STRING,
  SYSTEM,
  TABLE,
  TEXT,
  TIME,
  TRANSACTION,
  TRUE,
  UNIQUE,
  UPDATE,
  VALUES,
  VARCHAR,
  WHERE,
  WRITE
}

impl Keyword {
  pub fn from_str(identifier: &str) -> Option<Self> {
    Some(match identifier.to_uppercase( ).as_ref( ) {
      "AS" => Self::AS,
      "ASC" => Self::ASC,
      "AND" => Self::AND,
      "BEGIN" => Self::BEGIN,
      "BOOL" => Self::BOOL,
      "BOOLEAN" => Self::BOOLEAN,
      "BY" => Self::BY,
      "CHAR" => Self::CHAR,
      "COMMIT" => Self::COMMIT,
      "CREATE" => Self::CREATE,
      "CROSS" => Self::CROSS,
      "DEFAULT" => Self::DEFAULT,
      "DELETE" => Self::DELETE,
      "DESC" => Self::DESC,
      "DOUBLE" => Self::DOUBLE,
      "DROP" => Self::DROP,
      "EXPLAIN" => Self::EXPLAIN,
      "FALSE" => Self::FALSE,
      "FLOAT" => Self::FLOAT,
      "FROM" => Self::FROM,
      "GROUP" => Self::GROUP,
      "HAVING" => Self::HAVING,
      "INDEX" => Self::INDEX,
      "INFINITY" => Self::INFINITY,
      "INNER" => Self::INNER,
      "INSERT" => Self::INSERT,
      "INT" => Self::INT,
      "INTEGER" => Self::INTEGER,
      "INTO" => Self::INTO,
      "IS" => Self::IS,
      "JOIN" => Self::JOIN,
      "KEY" => Self::KEY,
      "LEFT" => Self::LEFT,
      "LIKE" => Self::LIKE,
      "LIMIT" => Self::LIMIT,
      "NAN" => Self::NAN,
      "NOT" => Self::NOT,
      "NULL" => Self::NULL,
      "OF" => Self::OF,
      "OFFSET" => Self::OFFSET,
      "ON" => Self::ON,
      "ONLY" => Self::ONLY,
      "OR" => Self::OR,
      "ORDER" => Self::ORDER,
      "OUTER" => Self::OUTER,
      "PRIMARY" => Self::PRIMARY,
      "READ" => Self::READ,
      "REFERENCES" => Self::REFERENCES,
      "RIGHT" => Self::RIGHT,
      "ROLLBACK" => Self::ROLLBACK,
      "SELECT" => Self::SELECT,
      "SET" => Self::SET,
      "STRING" => Self::STRING,
      "SYSTEM" => Self::SYSTEM,
      "TABLE" => Self::TABLE,
      "TEXT" => Self::TEXT,
      "TIME" => Self::TIME,
      "TRANSACTION" => Self::TRANSACTION,
      "TRUE" => Self::TRUE,
      "UNIQUE" => Self::UNIQUE,
      "UPDATE" => Self::UPDATE,
      "VALUES" => Self::VALUES,
      "VARCHAR" => Self::VARCHAR,
      "WHERE" => Self::WHERE,
      "WRITE" => Self::WRITE,
      _ => return None,
    })
  }

  pub fn to_str(&self) -> &str {
    match self {
      Self::AS => "AS",
      Self::ASC => "ASC",
      Self::AND => "AND",
      Self::BEGIN => "BEGIN",
      Self::BOOL => "BOOL",
      Self::BOOLEAN => "BOOLEAN",
      Self::BY => "BY",
      Self::CHAR => "CHAR",
      Self::COMMIT => "COMMIT",
      Self::CREATE => "CREATE",
      Self::CROSS => "CROSS",
      Self::DEFAULT => "DEFAULT",
      Self::DELETE => "DELETE",
      Self::DESC => "DESC",
      Self::DOUBLE => "DOUBLE",
      Self::DROP => "DROP",
      Self::EXPLAIN => "EXPLAIN",
      Self::FALSE => "FALSE",
      Self::FLOAT => "FLOAT",
      Self::FROM => "FROM",
      Self::GROUP => "GROUP",
      Self::HAVING => "HAVING",
      Self::INDEX => "INDEX",
      Self::INFINITY => "INFINITY",
      Self::INNER => "INNER",
      Self::INSERT => "INSERT",
      Self::INT => "INT",
      Self::INTEGER => "INTEGER",
      Self::INTO => "INTO",
      Self::IS => "IS",
      Self::JOIN => "JOIN",
      Self::KEY => "KEY",
      Self::LEFT => "LEFT",
      Self::LIKE => "LIKE",
      Self::LIMIT => "LIMIT",
      Self::NAN => "NAN",
      Self::NOT => "NOT",
      Self::NULL => "NULL",
      Self::OF => "OF",
      Self::OFFSET => "OFFSET",
      Self::ON => "ON",
      Self::ONLY => "ONLY",
      Self::OUTER => "OUTER",
      Self::OR => "OR",
      Self::ORDER => "ORDER",
      Self::PRIMARY => "PRIMARY",
      Self::READ => "READ",
      Self::REFERENCES => "REFERENCES",
      Self::RIGHT => "RIGHT",
      Self::ROLLBACK => "ROLLBACK",
      Self::SELECT => "SELECT",
      Self::SET => "SET",
      Self::STRING => "STRING",
      Self::SYSTEM => "SYSTEM",
      Self::TABLE => "TABLE",
      Self::TEXT => "TEXT",
      Self::TIME => "TIME",
      Self::TRANSACTION => "TRANSACTION",
      Self::TRUE => "TRUE",
      Self::UNIQUE => "UNIQUE",
      Self::UPDATE => "UPDATE",
      Self::VALUES => "VALUES",
      Self::VARCHAR => "VARCHAR",
      Self::WHERE => "WHERE",
      Self::WRITE => "WRITE",
    }
  }
}

impl Display for Keyword {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    f.write_str(self.to_str( ))
  }
}